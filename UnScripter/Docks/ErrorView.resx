<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ErrorViewImageList.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="ErrorViewImageList.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAACI
        BgAAAk1TRnQBSQFMAgEBAgEAARgBAAEYAQABEAEAARABAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABEAMAAQEBAAEYBgABDBgAA/UD1QPPA8sDxwPGA8UDxgPHA8sDzwPdA/sJAAP+A/wD+gKuAcQCqQHA
        AqYBvAKlAbwCpQG7AqgBvgLfAeQD+gP8A/5mAAPFA/MG0wPYA9wD4QPmA+sD7wP0A/kD/gP8A/UMAAI0
        AYcCAAGwAgABqwIAAaUCAAGgAgABnAIAAZgCAAGEAuEB6GkABv0DzgG+Ac8B1AGpAc4B2gGtAdIB3gGw
        AdUB4QG0AdkB5QG4Ad0B6QG7AeAB7AG/AeQB8AHDAegB9AHHAewB+AP7A/cDxgkAAjkBkwIAAbACAAGq
        AgABpAIAAZ0CAAGXAgABkgIAAY0CAAGLAgABfgLiAehmAAP+A/UD0wEAAa0B4wEAAa0B4wEAAa0B4wEA
        Aa0B4wEAAa0B4wEAAa0B4wEAAa0B4wEAAa0B4wEAAa0B4wEAAa0B4wGNAdcB7gPzA88GAAI8AZ4CAAGx
        AgABqwKbAcMCAAGeAgABlwIAAZACAAGKAgABhAKSAbYCAAF/AgABfwLkAepjAAP9A8YD2AE3AbkB4QEA
        Aa0B4wEAAa0B4wEAAa0B4wEAAa0B4wEAATABUAEAAa0B4wEAAa0B4wEAAa0B4wEAAa0B4wPzA/YD/AMA
        AkABqwIAAbUCAAGuA/QD7wKNAbICAAGTAgABjAIAAYUD8wP+ApIBswIAAYMCAAGLAuQB62AAA/oD9wPs
        A+EBAAGtAeMBAAGtAeMBAAGtAeMBAAGtAeMBAAGtAeMBAAGtAeMBAAGtAeMBAAGtAeMBPQG/AecD7wPF
        AwAD/QIAAbkCAAGyAikBpgP8A+8D5gKOAbECAAGKA/ED/AP3AuIB4wIAAYUCAAGPAgABmWAAA/0D/API
        A+YBQgG/AeYBAAGtAeMBAAGtAeMBAAGtAeMDLQEAAa0B4wEAAa0B4wEAAa0B4wPvA/QD/AMAA/0CAAG3
        AgABsQIAAaoCLgGmA/IG7gPzA/oD+QLoAeoCFAGPAhUBlQIXAZ0CGAGmYwAD/gP5A/QD7wEEAa4B4wEA
        Aa0B4wEAAa0B4wMtAQABrQHjAQABrQHjATwBvgHmA+sDxQYAA/0CFQG9AhUBtgIXAbICFgGsAj0BpgP1
        A/cD/AP6AuoB7AIcAZUCHQGZAiABngIgAaUCIQGsZgAD/gPHA/QBPgHAAegBAAGtAeMBAAGtAeMDGAEA
        Aa0B4wEAAa0B4wPrA/ID/AYAA/0CIQHBAh4BugIfAbUCIAGwAh0BqwP8A/4D+gP0Ap8BwAIjAaACJwGj
        AicBpwIoAa0CKQGzaQAD+gP8A/4BQwHDAeoBSwHFAesDTQFKAcUB6wFBAb8B5gPnA8UJAAP9AikBwwIq
        Ab4CJwG5AigBtQb6A/cD8wPtA+YCnAG8AjABrwIwAbECMQG1AjEBu2kAA/4DxQP7AYMB1gHwAWUBzQHu
        AWgBhwGRAWQBzQHuA+cD8AP8CQAD/QIxAccCMgHCAjIBvgPzA/UD9ALqAewCSwGsA+cD4gPaApkBugI4
        AbsCOgG+AjoBwmwAA/wD+wPzAX8B1gHxAYMB1wHxAZkB2gHvA+MDxQ8AAj4BygI7AccCVwG+A+8D8ALo
        AekCMwG4AjQBtwJRAbED3APVAswBzwJAAcICQQHGAoUBym8AA8gD7wHBAeQB7wGdAd8B9APjAfEC8gP9
        DwAD/wJDAcsCQgHJAl4BwALnAegCPwHCAjoBvwI7Ab4CPAG/AlYBtwLNAc8CSAHIAkkBygKaAdRyAAP+
        A/YD5wPjA+ID0BUAA/8CSwHOAkwBzgJNAc0CTQHLAkcByAJCAcYCQwHGAkMBxwJEAckCRwHMAqUB13gA
        A/cD1gPxA8YbAAP/Al0B1AJUAdMCVAHSAlUB0QJTAdACSgHNAksBzgJLAdACmgHUpQAD/wK4AecCuAHn
        ArgB5wK4AecCuAHnArcB6AKuAd1sAAFCAU0BPgcAAT4DAAEoAwABQAMAARADAAEBAQABAQUAAYAXAAP/
        AQABwAEBAcABAQQAAYABAAHwAQcGAAHgAQMGAAHAAQEGAAGABgABAQcAAQEGAAGAAQMGAAHAAQMGAAHg
        AQcGAAHgAQcGAAHwAQ8BgAUAAfgBDwGAAQEEAAH4AR8BwAEDBAAB/AE/AeABBwQAAv8B8AEPBAAL
</value>
  </data>
</root>